{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","classNames","completed","title","TodoList","todos","users","map","userTodos","find","userId","username","App","useState","setTitle","setUserId","isErrorTitle","setErorroTitle","isErrorUser","setErorroUser","usersFromServer","todosFromServer","setNewTodos","handleChange","e","target","value","action","method","onSubmit","event","preventDefault","getTitle","getUserId","newTodo","Math","max","Number","handleAddTodo","type","onChange","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.54e1feaa.chunk.js","sourcesContent":["import { User } from '../../types/users';\n\ntype UserInfoProps = {\n  user:User;\n};\n\nexport const UserInfo: React.FC<UserInfoProps> = ({ user }) => {\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { User } from '../../types/users';\nimport { Todo } from '../../types/todo';\n\ntype TodoInfoType = {\n  user:User | undefined;\n  todo:Todo;\n};\n\nexport const TodoInfo: React.FC<TodoInfoType> = ({ todo, user }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': todo.completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\nimport { User } from '../../types/users';\nimport { Todo } from '../../types/todo';\n\ntype TodoListType = {\n  users:User[];\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<TodoListType> = ({ todos, users }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => {\n        const userTodos = users.find(user => user.id === todo.userId);\n\n        return (\n          <TodoInfo todo={todo} user={userTodos} />\n        );\n      })}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import './App.scss';\nimport React, { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nexport const App: React.FC = () => {\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState('');\n  const [isErrorTitle, setErorroTitle] = useState(false);\n  const [isErrorUser, setErorroUser] = useState(false);\n  const [users] = useState(usersFromServer);\n  const [todos, setNewTodos] = useState(todosFromServer);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>\n  | React.ChangeEvent<HTMLSelectElement>) => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case ('title'):\n        return setTitle(value);\n\n      case ('userId'):\n        return setUserId(value);\n\n      default:\n        return 0;\n    }\n  };\n\n  const handleCheckValue = () => {\n    setErorroTitle(!title);\n    setErorroUser(!userId);\n  };\n\n  const handleAddTodo = (getTitle:string, getUserId:string) => {\n    const lastIdTodo = Math.max(...users.map(todo => todo.id));\n    const newTodo = {\n      id: lastIdTodo + 1,\n      title: getTitle,\n      completed: false,\n      userId: Number(getUserId),\n    };\n\n    setNewTodos([...todos, newTodo]);\n  };\n\n  const handleSubmit = (event:React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (title && userId) {\n      handleAddTodo(title, userId);\n    }\n\n    setTitle('');\n    setUserId('');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            Title:\n            {' '}\n            <input\n              name=\"title\"\n              type=\"text\"\n              data-cy=\"titleInput\"\n              onChange={handleChange}\n              value={title}\n            />\n          </label>\n\n          {isErrorTitle && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            User:\n            {' '}\n            <select\n              name=\"userId\"\n              data-cy=\"userSelect\"\n              value={userId}\n              onChange={handleChange}\n            >\n              <option value=\"0\">Choose a user</option>\n              {usersFromServer.map(user => (\n                <option value={user.id}>{user.name}</option>\n              ))}\n            </select>\n          </label>\n\n          {isErrorUser && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          onClick={handleCheckValue}\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList users={users} todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}